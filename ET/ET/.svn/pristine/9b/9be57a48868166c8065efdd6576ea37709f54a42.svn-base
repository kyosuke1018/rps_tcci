/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tcci.fc.facade.bpm;

import com.tcci.cm.facade.conf.SysResourcesFacade;
import com.tcci.cm.model.global.GlobalConstant;
import com.tcci.cm.util.NotificationUtils;
import com.tcci.cm.util.VelocityMail;
import com.tcci.et.model.MemberVO;
import com.tcci.et.model.MemberVenderVO;
import com.tcci.et.entity.EtMemberForm;
import com.tcci.et.entity.EtVcForm;
import com.tcci.et.entity.EtMemberVender;
import com.tcci.et.enums.FormStatusEnum;
import com.tcci.et.enums.FormTypeEnum;
import com.tcci.et.facade.EtMemberFormFacade;
import com.tcci.et.facade.EtVcFormFacade;
import com.tcci.et.facade.EtVenderCategoryFacade;
import com.tcci.et.facade.EtMemberVenderFacade;
import com.tcci.et.model.criteria.BaseCriteriaVO;
import com.tcci.fc.entity.bpm.TcActivity;
import com.tcci.fc.entity.bpm.TcProcess;
import com.tcci.fc.entity.bpm.TcWorkitem;
import com.tcci.fc.entity.org.TcUser;
import com.tcci.fc.facade.org.TcUserFacade;
import com.tcci.fc.util.StringUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Priority;
import javax.ejb.EJB;
import javax.enterprise.inject.Alternative;
import javax.inject.Inject;
import static javax.interceptor.Interceptor.Priority.APPLICATION;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Jimmy.Lee
 */
@Alternative @Priority(APPLICATION+1)
public class BpmEngineEx extends BPMEngineImpl {
    private final static Logger logger = LoggerFactory.getLogger(BpmEngineEx.class);
    // 暫存執行completeWorkitem的operator
    private static ThreadLocal<TcUser> threadLocal = new ThreadLocal<TcUser>();
    
    @EJB
    private EtMemberFormFacade memberFormFacade;
    @EJB
    private EtVcFormFacade vcFormFacade;
    @EJB
    private EtVenderCategoryFacade etVenderCategoryFacade;
    @EJB private EtMemberVenderFacade memberVenderFacade;
    @EJB private SysResourcesFacade sys;
    @Inject
    private TcUserFacade userFacade;

    // 當workitem啟動時
    // app可實作通知owner有一筆待簽核項目
    @Override
    public void onWorkitemStartNotification(TcWorkitem workitem) {
//        System.out.println(workitem.getOwner().getDisplayIdentifier() + " has a workitem id:" + workitem.getId());
        TcProcess process = workitem.getActivityid().getProcessid();
        String className = process.getPrimaryobjectclassname();
    }
    
    // 當執行 EXPRESSION_ROBOT activity
    // app 可依據 activity.getExpression() 執行不同功能。
    // 回傳值請指定 next activity route
    @Override
    public String onExecuteExpressionRobot(TcActivity activity) {
        String result = "success";
        logger.info("Robot activity(" + activity.getId() + ") " + activity.getActivityname() + " return " + result);
        return result;
    }

    // case 1:activity必簽,但沒有指定role users
    // case 2:onExecuteExpressionRobot 拋出exception
    // app 可實作通知系統管理員來處理。
    @Override
    public void onWaitingActivity(TcActivity activity) {
        logger.info("activity(" + activity.getId() + ") " + activity.getActivityname() + " 等待處理!");
    }

    // 當activity執行到END
    // app 可實作修改表單狀態, 通知申請人...
    @Override
    public void onCompleteProcess(TcProcess process) {
        TcUser operator = threadLocal.get();
        String completedBy = null == operator ? "" : " by " + operator.getDisplayIdentifier();
        logger.info("onCompleteProcess: form({}) by {}", process.getPrimaryobjectid(), completedBy);
        String className = process.getPrimaryobjectclassname();
        if(EtMemberForm.class.getName().equals(className)){
            EtMemberForm form = memberFormFacade.find(process.getPrimaryobjectid());
            //save status
            form.setStatus(FormStatusEnum.APPROVED);
            memberFormFacade.save(form, operator, Boolean.FALSE);
            MemberVO vo = memberFormFacade.findById(form.getId(), Boolean.TRUE, GlobalConstant.DEF_LOCALE.getLocale());
            //save relations
            //檢查重複
            BaseCriteriaVO criteriaVO = new BaseCriteriaVO();
            criteriaVO.setMemberId(vo.getMemberId());
            criteriaVO.setType(vo.getMandt());
            criteriaVO.setCode(vo.getApplyVenderCode());
            List<MemberVenderVO> list = memberVenderFacade.findByCriteria(criteriaVO);
            List<MemberVenderVO> list2 = memberVenderFacade.findLfa1ByCriteria(criteriaVO);
            if(CollectionUtils.isEmpty(list) && CollectionUtils.isNotEmpty(list2)){
                MemberVenderVO lfa1 = list2.get(0);
                //會員綁定供應商
                EtMemberVender entity = new EtMemberVender();
                entity.setMainId(vo.getMemberId());
                entity.setMandt(lfa1.getMandt());
                entity.setVenderCode(lfa1.getVenderCode());
                entity.setCname(lfa1.getCname());
                memberVenderFacade.save(entity, operator, Boolean.FALSE);
            }
            
            if(FormTypeEnum.M_V.getCode().equals(vo.getType())){
                this.completeProcessNotificationMv(process, vo);
            }else if(FormTypeEnum.M_NV.getCode().equals(vo.getType())){
                //disable ET_VENDER 中 沒有APPLY_ID, 相同供應商代碼的資料
                //20190625 不disable
//                RfqCriteriaVO rfqCriteriaVO = new RfqCriteriaVO();
//                rfqCriteriaVO.setMandt(className);
//                rfqCriteriaVO.setLifnrUi(className);
//                rfqCriteriaVO.setDisabled(Boolean.FALSE);
//                List<VenderAllVO> venderAllVOList = etVenderAllFacade.findByCriteria(rfqCriteriaVO);
//                if(CollectionUtils.isNotEmpty(venderAllVOList)){
//                    TcUser admin = userFacade.findUserByLoginAccount("administrator", null);
//                    for(VenderAllVO venderAllVO:venderAllVOList){
//                        if(venderAllVO.getApplyId() == null){
//                            venderAllVO.setDisabled(Boolean.TRUE);
//                            etVenderAllFacade.saveVO(venderAllVO, admin, false);
//                        }
//                    }
//                }
                this.completeProcessNotificationMnv(process, vo);
//            }else if(FormTypeEnum.M_I.getCode().equals(vo.getType())){
                
            }
            
        }else if(EtVcForm.class.getName().equals(className)){
            EtVcForm form = vcFormFacade.find(process.getPrimaryobjectid());
            //save status
            form.setStatus(FormStatusEnum.APPROVED);
            vcFormFacade.save(form, operator, Boolean.FALSE);
            MemberVenderVO vo = vcFormFacade.findById(form.getId(), Boolean.TRUE);
            //save relations
            List<Long> selectedCategorys = new ArrayList<>();
            if(StringUtils.isNotBlank(vo.getCids())){
                String[] ids = vo.getCids().split(",");
                for(String idStr:ids){
                    selectedCategorys.add(Long.parseLong(idStr));
                }
            }
            etVenderCategoryFacade.saveCategory(vo, selectedCategorys, operator);
            this.completeProcessNotificationVc(process, form);
        }
        
    }
    
    private void completeProcessNotificationMv(TcProcess process, MemberVO vo){
        String to = vo.getEmail();
        String phase = FormTypeEnum.M_V.getName();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已核准";
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.M_V.getCode());
        mailBean.put("form", vo);
        mailBean.put("phase", phase);
        
        VelocityMail.sendMail(parameters, mailBean, "sign_complete.vm");
    }
    
    private void completeProcessNotificationMnv(TcProcess process, MemberVO vo){
        String to = vo.getEmail();
        String phase = FormTypeEnum.M_NV.getName();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已核准";
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.M_NV.getCode());
        mailBean.put("form", vo);
        mailBean.put("phase", phase);
        
        VelocityMail.sendMail(parameters, mailBean, "sign_complete.vm");
    }
    
    private void completeProcessNotificationVc(TcProcess process, EtVcForm form){
        String to = form.getCreator().getEmail();
        String phase = FormTypeEnum.V_C.getName();
        // 
//        Map<String, Object> mailBean = new HashMap<>();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已核准，" + form.mailSubject();
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        String viewUrl = sys.getServiceUrlPrefix() + "/faces/vender/formView.xhtml";
        logger.info("completeProcessNotificationVc: viewUrl:{}", viewUrl);
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.V_C.getCode());
        mailBean.put("form", form);
        mailBean.put("phase", phase);
        mailBean.put("viewUrl", viewUrl);
//        mailBean.put("process", process);
//        ResourceBundle msgApp = ResourceBundle.getBundle("messages",
//            FacesContext.getCurrentInstance().getViewRoot().getLocale());
//        ResourceBundle msgApp = ResourceBundle.getBundle("msgApp");
//        mailBean.put("msgApp", msgApp);
        VelocityMail.sendMail(parameters, mailBean, "sign_complete.vm");
    }

    // 當直接呼叫terminateProcess或簽核時routename是'TERMINATE'
    // app 可實作修改表單狀態, 通知申請人...
    @Override
    public void onTerminateProcess(TcProcess process) {
        TcUser operator = process.getTerminator();
        String terminatedBy = null == operator ? "" : " by " + operator.getDisplayIdentifier();
        logger.debug("process(" + process.getId() + ") terminated" + terminatedBy + ".");
        String className = process.getPrimaryobjectclassname();
        if(EtMemberForm.class.getName().equals(className)){
            MemberVO vo = memberFormFacade.findById(process.getPrimaryobjectid(), Boolean.TRUE, GlobalConstant.DEF_LOCALE.getLocale());
            if(FormTypeEnum.M_V.getCode().equals(vo.getType())){
                this.terminateProcessNotificationMv(process, vo);
            }else if(FormTypeEnum.M_NV.getCode().equals(vo.getType())){
                this.terminateProcessNotificationMnv(process, vo);
            }
        }else if(EtVcForm.class.getName().equals(className)){
            EtVcForm form = vcFormFacade.find(process.getPrimaryobjectid());
            this.terminateProcessNotificationVc(process, form);
        }
        
    }
    
    private void terminateProcessNotificationMv(TcProcess process, MemberVO vo){
        String to = vo.getEmail();
        String phase = FormTypeEnum.M_V.getName();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已駁回";
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.M_V.getCode());
        mailBean.put("form", vo);
        mailBean.put("phase", phase);
        String terminateReason = process.getTerminateReason();
        mailBean.put("terminateReason", terminateReason);
        
        VelocityMail.sendMail(parameters, mailBean, "sign_reject.vm");
    }
    
    private void terminateProcessNotificationMnv(TcProcess process, MemberVO vo){
        String to = vo.getEmail();
        String phase = FormTypeEnum.M_NV.getName();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已駁回";
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.M_NV.getCode());
        mailBean.put("form", vo);
        mailBean.put("phase", phase);
        String terminateReason = process.getTerminateReason();
        mailBean.put("terminateReason", terminateReason);
        
        VelocityMail.sendMail(parameters, mailBean, "sign_reject.vm");
    }
    
    private void terminateProcessNotificationVc(TcProcess process, EtVcForm form){
        String to = form.getCreator().getEmail();
        String phase = FormTypeEnum.V_C.getName();
        // 
//        Map<String, Object> mailBean = new HashMap<>();
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = phase + "已駁回，" + form.mailSubject();
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, to);
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        String viewUrl = sys.getServiceUrlPrefix() + "/faces/vender/formView.xhtml";
        logger.info("completeProcessNotificationVc: viewUrl:{}", viewUrl);
        // HTML 樣板內參數
        Map<String, Object> mailBean = new HashMap<>();
        mailBean.put("formType",  FormTypeEnum.V_C.getCode());
        mailBean.put("form", form);
        mailBean.put("phase", phase);
        mailBean.put("viewUrl", viewUrl);
        String terminateReason = process.getTerminateReason();
        mailBean.put("terminateReason", terminateReason);
//        mailBean.put("process", process);
//        ResourceBundle msgApp = ResourceBundle.getBundle("messages",
//            FacesContext.getCurrentInstance().getViewRoot().getLocale());
//        ResourceBundle msgApp = ResourceBundle.getBundle("msgApp");
//        mailBean.put("msgApp", msgApp);
        VelocityMail.sendMail(parameters, mailBean, "sign_reject.vm");
    }

    // 簽核API
    // ballot: UI的簽核項目,例如 approve, reject, reassign, partialApproval (請於msgBpm.properties定義其中文名稱)
    // routeName: 實際的 next activity route. 例如 approve, partialApproval可設為approve. 若是設TERMINATE將立即停止流程
    //            若設為不存在的route時(如reject) 最後會選最的實際route為next activity
    // operator是執行的人,若與workitem.owner不同時且allowAgent是false時會拋出exception
    @Override
    public void completeWorkitem(TcWorkitem workitem, String ballot, String routeName, String comments, TcUser operator, boolean allowAgent) {
        logger.info("completeWorkitem by " + operator);
        threadLocal.set(operator);
        super.completeWorkitem(workitem, ballot, routeName, comments, operator, allowAgent);
        threadLocal.remove();
    }

    // 批次通知待簽事項
    // APP自訂schedule來呼叫batchNotifyRunningWorkitems, 並Override底下實作
    @Override
    public void onBatchNotifyRunningWorkitems(TcUser owner, List<TcWorkitem> workitems) {
        logger.info(owner.getCname() + "有下列申請單待簽核:");
        for (TcWorkitem workitem : workitems) {
            StringBuilder sb = new StringBuilder();
            sb.append("id:").append(workitem.getId())
              .append(", ").append(workitem.getActivityname())
              .append(", ").append(workitem.getStarttimestamp());
            logger.info(sb.toString());
        }
        Map<Long, MemberVO> mvMap = new HashMap<>();
        Map<Long, MemberVO> mnvMap = new HashMap<>();
//        Map<Long, MemberVO> miMap = new HashMap<>();
        Map<Long, MemberVenderVO> vcMap = new HashMap<>();
        List<TcWorkitem> mvWorkitems = new ArrayList<>();
        List<TcWorkitem> mnvWorkitems = new ArrayList<>();
//        List<TcWorkitem> miWorkitems = new ArrayList<>();
        List<TcWorkitem> vcWorkitems = new ArrayList<>();
        for (TcWorkitem workitem : workitems) {
            TcProcess process = workitem.getActivityid().getProcessid();
            String className = process.getPrimaryobjectclassname();
            if(EtMemberForm.class.getName().equals(className)){
                MemberVO vo = memberFormFacade.findById(process.getPrimaryobjectid(), Boolean.TRUE, GlobalConstant.DEF_LOCALE.getLocale());
                if(FormTypeEnum.M_V.getCode().equals(vo.getType())){
                    mvMap.put(workitem.getId(), vo);
                    mvWorkitems.add(workitem);
                }else if(FormTypeEnum.M_NV.getCode().equals(vo.getType())){
                    mnvMap.put(workitem.getId(), vo);
                    mnvWorkitems.add(workitem);
//                }else if(FormTypeEnum.M_I.getCode().equals(vo.getType())){
//                    miMap.put(workitem.getId(), vo);
//                    miWorkitems.add(workitem);
                }
            }else if(EtVcForm.class.getName().equals(className)){
                MemberVenderVO vo = vcFormFacade.findById(process.getPrimaryobjectid(), Boolean.TRUE);
                vcMap.put(workitem.getId(), vo);
                vcWorkitems.add(workitem);
            }
        }
        
        //notifyRunningWorkitems summary
        HashMap<String, Object> parameters = new HashMap<>();
        String subject = "陽光採購平台申請單等待簽核通知";
        parameters.put(VelocityMail.SUBJECT, subject);
        parameters.put(VelocityMail.TO, owner.getEmail());
        //BCC收件人 admin 上線初期加發
        String bcc = sys.getNotifyAdmins();
        parameters.put(VelocityMail.BCC, bcc);
        
        Map<String, Object> mailBean = new HashMap<>();
        String mvSignUrl = sys.getServiceUrlPrefix() + "/faces/member/formSign.xhtml";
        String vcSignUrl = sys.getServiceUrlPrefix() + "/faces/vender/formSign.xhtml";
        mailBean.put("mvFormName",  FormTypeEnum.M_V.getName());
        mailBean.put("mvSignUrl", mvSignUrl);
        mailBean.put("mvWorkitems", mvWorkitems);
        mailBean.put("mvMap", mvMap);
        mailBean.put("mnvFormName",  FormTypeEnum.M_NV.getName());
        mailBean.put("mnvWorkitems", mnvWorkitems);
        mailBean.put("mnvMap", mnvMap);
//        mailBean.put("miFormName",  FormTypeEnum.M_I.getName());
//        mailBean.put("miWorkitems", miWorkitems);
//        mailBean.put("miMap", mvMap);
        
        mailBean.put("vcFormName",  FormTypeEnum.V_C.getName());
        mailBean.put("vcSignUrl", vcSignUrl);
        mailBean.put("vcWorkitems", vcWorkitems);
        mailBean.put("vcMap", vcMap);
        VelocityMail.sendMail(parameters, mailBean, "sign_waiting_batch.vm");
    }

    // 自動改派: workitem啟動或改派時呼叫此API
	// return null: 無需改派
	// return ReassignVO: newOwner(新簽核人), comments(簽核意見). newOwner為null時簽核狀態改為PASS
    @Override
    public ReassignVO autoReassign(TcWorkitem workitem) {
        ReassignVO vo = super.autoReassign(workitem);
        if (vo != null) {
            String newOwner = (null == vo.getNewOwner()) ? null : vo.getNewOwner().getCname();
            String msg = String.format("%s(%d) auto reassign -> %s", workitem.getActivityname(), workitem.getId(), newOwner);
            logger.info(msg);
        }
        return vo;
    }

}
